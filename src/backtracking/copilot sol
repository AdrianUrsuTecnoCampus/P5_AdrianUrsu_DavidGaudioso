public char[][] getMillorSolucio() {
    return this.taulellMillor;
}

public Runnable start(boolean optim)
{
    taulellSol = repte.getPuzzle();
    marcades = new boolean[repte.getItemsSize()];

    if(!optim) {
        if (!this.backUnaSolucio(0))
            throw new RuntimeException("solució no trobada");
        guardarMillorSolucio();
    }else
        this.backMillorSolucio(0);
    return null;
}

private boolean esSolucio(int index) {
    for(int i = 0; i< taulellSol.length; i++) {
        for(int j = 0; j<taulellSol[i].length; j++) {
            if(taulellSol[i][j] != ' '){
                return false;
            }
        }
    }
    return true;
}

private boolean completable() {
    for(int i = 0; i< taulellSol.length; i++) {
        for(int j = 0; j<taulellSol[i].length; j++) {
            if(taulellSol[i][j] == ' '){
                return true;
            }
        }
    }
    return false;
}

EsSolucio: Verifica que esté devolviendo true cuando todas las posiciones estén correctamente llenas, no cuando están vacías.

Completable: Verifica que esté devolviendo true cuando hay posiciones que pueden ser llenadas.

private void anotarASolucio(int indexUbicacio, int indexItem) {
    PosicioInicial ubi = this.repte.getEspaisDisponibles().get(indexUbicacio);
    char[] palabra = this.repte.getItem(indexItem);

    if (ubi.getDireccio() == 'V') {
        for (int i = 0; (ubi.getLength()-i)!=0; i++) {
            taulellSol[ubi.getInitRow() + i][ubi.getInitCol()] = palabra[i];
        }
    } else {
        for (int j = 0;(ubi.getLength()-j)!=0; j++) {
            taulellSol[ubi.getInitRow()][ubi.getInitCol() + j] = palabra[j];
        }
    }
}

private void desanotarDeSolucio(int indexUbicacio, int indexItem) {
    PosicioInicial ubi = this.repte.getEspaisDisponibles().get(indexUbicacio);
    char[] paraula = this.repte.getItem(indexItem);
    int fila = ubi.getInitRow();
    int col = ubi.getInitCol();

    for(int i = 0; i<paraula.length; i++) {
        if(ubi.getDireccio() == 'V'){
            if(taulellSol[fila+i][col] == paraula[i]){
                if(esPotEliminar(ubi))
                    taulellSol[fila+i][col] = ' ';
            }
        } else {
            if(taulellSol[fila][col+i] == paraula[i]){
                if(esPotEliminar(ubi))
                    taulellSol[fila][col+i] = ' ';
            }
        }
    }
}

DesanotarDeSolucio: Verifica que esté limpiando correctamente solo cuando se puede eliminar la palabra actual.

private boolean backUnaSolucio(int indexUbicacio) {
    boolean trobada = false;
    for(int indexItem = 0; indexItem < this.repte.getItemsSize() && !trobada; indexItem++) {
        if(acceptable( indexUbicacio, indexItem)) {
            anotarASolucio(indexUbicacio, indexItem);

            if(esSolucio(indexUbicacio)) {
                return true;
            } else
                trobada = this.backUnaSolucio(indexUbicacio+1);
            if(!trobada)
                desanotarDeSolucio(indexUbicacio, indexItem);
        }
    }
    return trobada;
}

private void backMillorSolucio(int indexUbicacio) {
    int indexItem = 0;
    while (quedin_valors()) {
        if (acceptable(indexUbicacio,indexItem)) {
            anotarASolucio(indexUbicacio,indexItem);
            if (esSolucio(0)) {
                if(calcularFuncioObjectiu(this.taulellSol) > calcularFuncioObjectiu(this.taulellMillor))
                    guardarMillorSolucio();
            } else if (completable()) {
                backMillorSolucio(indexUbicacio + 1);
            }
            desanotarDeSolucio(indexUbicacio, indexItem);
        }
        indexItem++;
    }
}

backUnaSolucio y backMillorSolucio: Verifica que estén recorriendo todas las combinaciones posibles y que llamen correctamente a anotarASolucio y desanotarDeSolucio.

Conclusión:

Uno de los problemas más evidentes está en la función esSolucio. La función debería devolver true solo cuando todas las ubicaciones están llenas y no cuando están vacías.

Haz estos ajustes y verifica si tus tests empiezan a pasar. Si después de esto aún tienes problemas, proporciona detalles adicionales sobre los errores específicos que estás viendo, y estaré encantado de profundizar más. ¡Buena suerte!